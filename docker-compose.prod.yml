version: "3.8"

services:
  backend:
    # build:
    #   context: .
    #   dockerfile: Dockerfile.prod
    # image: adora-app
    image: adora-backend
    volumes:
      - static_volume:/home/app/backend/core/static
      - media_volume:/home/app/backend/media
      - core_media_volume:/home/app/backend/core/media
      - gunicorn_socket:/var/run
    env_file:
      - ./.env.prod
    environment:
      - DJANGO_ENV=production
    entrypoint: ["/bin/bash", "-c", "./docker-entrypoint.prod.sh"]
    depends_on:
      db:
        condition: service_healthy
      redis_master:
        condition: service_healthy

      redis_replica:
        condition: service_healthy
    restart: unless-stopped

  db:
    image: postgres:15-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      - POSTGRES_USER=adora_user
      - POSTGRES_PASSWORD=1234
      - POSTGRES_DB=adora_db
    ports:
      - 5432:5432
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U adora_user -d adora_db"]
      interval: 5s
      timeout: 5s
      retries: 5

  # redis:
  #   image: "redis:alpine"
  #   ports:
  #     - "6379:6379"
  #   restart: always

  redis_master:
    image: "redis:alpine"
    container_name: redis_master
    ports:
      - "6379:6379"
    volumes:
      - redis_master_data:/data
    command: redis-server --requirepass "1234" # Optional: If you want to set a password
    restart: always
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "1234", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5

  redis_replica:
    image: "redis:alpine"
    container_name: redis_replica
    environment:
      - REDIS_MASTER_HOST=redis_master
      - REDIS_MASTER_PORT=6379
    command: redis-server --slaveof redis_master 6379 --requirepass "1234" --masterauth "1234" # Optional: if using password
    ports:
      - "6380:6379" # Map to a different port to avoid conflict
    restart: always
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "1234", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5

  nginx:
    # build: ./nginx
    image: adora-nginx
    volumes:
      - static_volume:/home/app/backend/core/static
      - media_volume:/home/app/backend/media
      - gunicorn_socket:/var/run
      - ./ssl:/etc/nginx/ssl
      # - ./nginx.conf:/etc/nginx
      - flower_static:/usr/share/nginx/flower_static # Mount the shared volume here
      - core_media_volume:/home/app/backend/core/media
      - wordpress_data:/var/www/html
      - ./nginx/conf/:/etc/nginx/conf.d/:ro
      # - ./certbot/www/:/var/www/certbot/:ro
      


    ports:
      - 80:80
      - 443:443

    depends_on:
      - backend
      - wordpress
    restart: always

  # certbot:
  #   image: certbot/certbot:latest
  #   volumes:
  #     - ./certbot/www/:/var/www/certbot/:rw
  #     - ./certbot/conf/:/etc/letsencrypt/:rw
  celery:
    # build:
    # context: .
    # dockerfile: Dockerfile.prod
    image: adora-backend
    user: "1000:1000"

    entrypoint: ./docker-entrypoint-celery-worker.sh
    # volumes:
    #   - .:/home/app/backend/
    env_file:
      - ./.env.prod
    environment:
      - DJANGO_ENV=production
    depends_on:
      db:
        condition: service_healthy
      redis_master:
        condition: service_healthy
      redis_replica:
        condition: service_healthy
      backend:
        condition: service_started

    restart: unless-stopped
  # celery_beat:
  #   build:
  #     context: .
  #     dockerfile: Dockerfile.prod
  #   image: adora-app
  #   entrypoint: ./docker-entrypoint-celery-beat.sh
  #   # volumes:
  #   #   - .:/home/app/backend/
  #   env_file:
  #     - ./.env.dev
  # environment:
  #   - DJANGO_ENV=production
  #   depends_on:
  #     - redis
  #     - db

  flower:
    # build:
    #  context: .
    #  dockerfile: Dockerfile.prod
    image: adora-backend
    entrypoint: ./docker-entrypoint-celery-flower.sh
    volumes:
      - static_volume:/home/app/backend/core/static
      - flower_static:/usr/local/lib/python3.11/site-packages/flower/static # Share the volume with Nginx

    env_file:
      - ./.env.prod
    environment:
      - DJANGO_ENV=production
      - REDIS_PASSWORD=1234
    ports:
      - 5557:5555
    depends_on:
      - redis_master
      - redis_replica
      - db

  wordpress:
    image: wordpress:6.5-php8.2-apache
    container_name: wordpress
    restart: unless-stopped
    environment:
      WORDPRESS_DB_HOST: wordpress_db:3306
      WORDPRESS_DB_NAME: wp_db
      WORDPRESS_DB_USER: wp_usr
      WORDPRESS_DB_PASSWORD: wusr@2025@66688
      WORDPRESS_DEBUG: 1
      WORDPRESS_CONFIG_EXTRA: |
        define('WP_HOME', 'https://adorayadak.ir/blogs/');
        define('WP_SITEURL', 'https://adorayadak.ir/blogs/');
        define('ADMIN_COOKIE_PATH', '/blogs/');
        define('COOKIEPATH', '/blogs/');
        define('SITECOOKIEPATH', '/blogs/');
    volumes:
      - wordpress_data:/var/www/html
    ports:
      - 8080:80
    depends_on:
      - wordpress_db
      # wordpress_db:
      # condition: service_healthy

    # healthcheck:
    #   test: ["CMD", "curl", "-f", "http://localhost:80/"]
    #   interval: 5s
    #   timeout: 5s
    #   retries: 5

  wordpress_db:
    image: mysql:8.0
    container_name: wordpress_db
    restart: unless-stopped
    environment:
      MYSQL_DATABASE: wp_db
      MYSQL_USER: wp_usr
      MYSQL_PASSWORD: wusr@2025@66688
      MYSQL_ROOT_PASSWORD: rootpass
    volumes:
      - wordpress_db_data:/var/lib/mysql

    healthcheck:
      test:
        [
          "CMD",
          "mysqladmin",
          "ping",
          "-h",
          "localhost",
          "-u",
          "wp_usr",
          "-p",
          "wusr@2025@66688",
        ]
      interval: 5s
      timeout: 5s
      retries: 5

volumes:
  postgres_data:
  media_volume:
  static_volume:
  gunicorn_socket:
  redis_master_data:
  flower_static:
  core_media_volume:
  wordpress_data:
  wordpress_db_data:
