# Use the official Python image as a base image  
FROM python:3.11-slim  

# Environment variables  
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    DJANGO_ENV=production \
    HOME=/home/app \
    APP_HOME=/home/app/backend  

# Install necessary packages and clean up in one layer  
RUN apt-get update && \
    apt-get install -y --no-install-recommends gcc iputils-ping && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*  

# Create a system group and user  
RUN addgroup --system adora_g && \
    adduser --system --ingroup adora_g adora_u  

# Create necessary directories  
# ایجاد دایرکتوری‌های مورد نیاز و تنظیم مالکیت آنها
RUN mkdir -p $APP_HOME/media $APP_HOME/core/static $APP_HOME/core/media && \
    chown -R adora_u:adora_g $APP_HOME/media $APP_HOME/core/static $APP_HOME/core/media
  

# Set working directory  
WORKDIR $APP_HOME  

# Copy only requirements first to take advantage of Docker cache  
COPY requirements.txt .  

# Install dependencies  
RUN pip install --no-cache-dir --upgrade pip && \
    pip install --no-cache-dir -r requirements.txt  

# Copy application code with ownership change  
COPY --chown=adora_u:adora_g . .  

# Copy entrypoint scripts and set permissions in one command  
COPY --chown=adora_u:adora_g docker-entrypoint* wait-for-it.sh $APP_HOME/  
RUN chmod +x $APP_HOME/docker-entrypoint* \
            $APP_HOME/wait-for-it.sh  

# Change ownership of the run directory  
RUN chown -R adora_u:adora_g /var/run/  

# Switch to the app user  
USER adora_u  

# Define the entrypoint  
ENTRYPOINT ["./docker-entrypoint.prod.sh"]